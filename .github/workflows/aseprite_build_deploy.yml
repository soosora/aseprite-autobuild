name: Build and Release Aseprite

on:
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Instalar as dependências necessárias
      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            g++ \
            cmake \
            ninja-build \
            libjpeg-turbo8-dev \
            libpixman-1-dev \
            libfreetype6-dev \ 
            libharfbuzz-dev \ 
            zlib1g-dev \
            libx11-dev \ 
            libxcursor-dev \
            libxi-dev \ 
            libgl1-mesa-dev \ 
            libfontconfig1-dev \
            curl \
            unzip \
            git

      # 2. Clonar o repositório do Aseprite com submódulos
      - name: Clonar repositório do Aseprite
        run: |
          git clone --recursive --depth=1 --branch=main https://github.com/aseprite/aseprite.git aseprite

      # 3. Atualizar os submódulos (caso necessário)
      - name: Atualizar submódulos
        working-directory: aseprite
        run: git submodule update --init --recursive

      # 4. Baixar e configurar o Skia
      - name: Baixar e extrair Skia
        run: |
          SKIA_VERSION="m102-861e4743af"
          SKIA_URL="https://github.com/aseprite/skia/releases/download/${SKIA_VERSION}/Skia-Linux-Release-x64-libstdc++.zip"
          curl -L $SKIA_URL -o skia.zip
          unzip skia.zip -d skia

      # 5. Compilar o Aseprite
      - name: Compilar Aseprite
        run: |
          mkdir -p aseprite/build
          cd aseprite/build
          cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=../../skia \
            -DSKIA_LIBRARY_DIR=../../skia/out/Release-x64 \
            -G Ninja ..
          ninja aseprite

      # 6. Criar um Release no GitHub
      - name: Criar Release
        id: criar_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ github.run_id }}
          release_name: Nightly Build ${{ github.run_id }}
          draft: false
          prerelease: true

      # 7. Salvar a URL de upload no GITHUB_OUTPUT
      - name: Salvar URL de upload
        run: echo "upload_url=${{ steps.criar_release.outputs.upload_url }}" >> $GITHUB_OUTPUT

      # 8. Fazer upload do binário compilado
      - name: Fazer upload do binário compilado
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.criar_release.outputs.upload_url }}
          asset_path: aseprite/build/bin/aseprite
          asset_name: aseprite-linux
          asset_content_type: application/octet-stream
